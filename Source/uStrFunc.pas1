{*******************************************************}
{                                                       }
{     OPC Sinoptic Service  V 4.0                       }
{     Copyright (c) 2001-2012 by Alex A. Lagodny        }
{                                                       }
{*******************************************************}

unit uStrFunc;

interface

uses
  SysUtils;

function StrToHex(Str: string; aDelimiter: string = ' '): string; overload;
function StrToHex(Str: AnsiString; aDelimiter: String = ' '): string; overload;
function HexToStr(Hex: string; aDelimiter: string = ' '): string;
function XORStr(Str: string): byte;

function EncodeStr(aStr: string): string;
function DecodeStr(aStr: string): string;


function ConvertStrToBin(S: string): string;
function ConvertBinToStr(S: string): string;

function RemoveNonprintingSymbols(S: string): string;

function ExtendedToStr(Value: Extended; const AFormatSettings: TFormatSettings): string; overload; inline;
function ExtendedToStr(Value: Extended): string; overload;

implementation


function ExtendedToStr(Value: Extended; const AFormatSettings: TFormatSettings): string;
var
  Buffer: array[0..63] of Char;
begin
  SetString(Result, Buffer, FloatToText(Buffer, Value, fvExtended,
    ffGeneral, 20, 0, AFormatSettings));
end;

function ExtendedToStr(Value: Extended): string;
begin
  Result := ExtendedToStr(Value, FormatSettings);
end;  

function EncodeStr(aStr: string): string;
begin
  Result := StrToHex(aStr);
end;

function DecodeStr(aStr: string): string;
begin
  Result := HexToStr(aStr);
end;


function StrToHex(Str: string; aDelimiter: string): string;
var
  i: Integer;
  b: TBytes;
begin
  Result := '';
  b := TEncoding.ANSI.GetBytes(Str);
  for I := 0 to Length(b) - 1 do
    Result := Result + IntToHex(b[i], 2) + aDelimiter;
end;

function StrToHex(Str: AnsiString; aDelimiter: String): string;
var
  i: Integer;
begin
  Result := '';
  for I := 1 to Length(Str) do
    Result := Result + IntToHex(Ord(Str[i]), 2) + aDelimiter;
end;


function HexToStr(Hex: string; aDelimiter: string): string;
var
  str: string;
  a: AnsiString;
  p: Integer;
begin
  SetLength(a, 0);
  str := Trim(Hex);
  while str <> '' do
  begin
    a := a + AnsiChar(StrToInt('$' + Copy(str, 1, 2)));
    p := 3;
    while p <= Length(str) do
    begin
      if (str[p] <> aDelimiter) then
        Break
      else
        Inc(p);
    end;
    str := Trim(Copy(str, p, length(str)));
  end;
  Result := a;
end;

function XORStr(Str: string): byte;
var
  i: Integer;
  b: TBytes;
begin
  Result := 0;
  b := TEncoding.ANSI.GetBytes(Str);
  for i := 0 to Length(b) - 1 do
    Result := Result xor b[i];
end;

/// на входе строка вида '—трока'#13#10
/// на выходе внутреннее представление этой строки (D1 F2 F0 EE EA E0 0D 0A)

function ConvertStrToBin(S: string): string;
var
  L: integer;
  I, J: integer;
begin
  Result := '';
  S := Trim(S);
  L := Length(S);
  if L = 0 then
    exit;

  I := 1;
  repeat
    if S[I] = '''' then
    begin
      J := I + 1;
      repeat
        Inc(I);
      until (I > L) or (S[I] = '''');
      Result := Result + Copy(S, J, I - J);
      Inc(I);
    end
    else if S[I] = '#' then
    begin
      J := I + 1;
      repeat
        Inc(I);
      until (I > L) or (S[I] = '''') or (S[I] = '#');
      Result := Result + Chr(StrToInt(Copy(S, J, I - J)));
    end
    else
      raise EConvertError.CreateFmt('Can not convert %s to bin', [S]);
  until I > L;
end;

/// на входе внутреннее представление строки (D1 F2 F0 EE EA E0 0D 0A)
/// на выходе строка вида '—трока'#13#10

function ConvertBinToStr(S: string): string;
var
  L: integer;
  I, J: integer;
begin
  Result := '';
  L := Length(S);
  if L = 0 then
    Result := ''''''
  else
  begin
    I := 1;
    repeat
      if (S[I] >= ' ') and (S[I] <> '''') and (S[I] <> '=') then
      begin
        J := I;
        repeat
          Inc(I)
        until (I > L) or (S[I] < ' ') or (S[I] = '''') or (S[I] = '=');
        Result := Result + '''';
        Result := Result + Copy(S, J, I - J);
        Result := Result + '''';
      end
      else
      begin
        Result := Result + '#';
        Result := Result + (IntToStr(Ord(S[I])));
        Inc(I);
      end;
    until I > L;
  end;

end;

function RemoveNonprintingSymbols(S: string): string;
var
  L, I, J: integer;
begin
  Result := '';
  L := Length(S);
  if L = 0 then
    Result := ''
  else
  begin
    I := 1;
    repeat
      if (S[I] >= ' ') then
      begin
        J := I;
        repeat
          Inc(I)
        until (I > L) or (S[I] < ' ');
        Result := Result + Copy(S, J, I - J);
      end
      else
      begin
        Result := Result + ' ';
        Inc(I);
      end;
    until I > L;
  end;
end;

end.

